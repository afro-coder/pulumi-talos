// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Talos.Machine
{
    public static class Disks
    {
        /// <summary>
        /// Generate a machine configuration for a node type
        /// 
        /// &gt; **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.Disks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Talos = Pulumi.Talos;
        /// using Talos = Pulumiverse.Talos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisSecrets = new Talos.Machine.Secrets("thisSecrets");
        /// 
        ///     var thisDisks = Talos.Machine.Disks.Invoke(new()
        ///     {
        ///         ClientConfiguration = thisSecrets.ClientConfiguration,
        ///         Node = "10.5.0.2",
        ///         Filters = new Talos.Machine.Inputs.DisksFiltersInputArgs
        ///         {
        ///             Size = "&gt; 100GB",
        ///             Type = "nvme",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["nvmeDisks"] = thisDisks.Apply(disksResult =&gt; disksResult.Disks).Select(__item =&gt; __item.Name).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<DisksResult> InvokeAsync(DisksArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DisksResult>("talos:machine/disks:Disks", args ?? new DisksArgs(), options.WithDefaults());

        /// <summary>
        /// Generate a machine configuration for a node type
        /// 
        /// &gt; **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.Disks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Talos = Pulumi.Talos;
        /// using Talos = Pulumiverse.Talos;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var thisSecrets = new Talos.Machine.Secrets("thisSecrets");
        /// 
        ///     var thisDisks = Talos.Machine.Disks.Invoke(new()
        ///     {
        ///         ClientConfiguration = thisSecrets.ClientConfiguration,
        ///         Node = "10.5.0.2",
        ///         Filters = new Talos.Machine.Inputs.DisksFiltersInputArgs
        ///         {
        ///             Size = "&gt; 100GB",
        ///             Type = "nvme",
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["nvmeDisks"] = thisDisks.Apply(disksResult =&gt; disksResult.Disks).Select(__item =&gt; __item.Name).ToList(),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<DisksResult> Invoke(DisksInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DisksResult>("talos:machine/disks:Disks", args ?? new DisksInvokeArgs(), options.WithDefaults());
    }


    public sealed class DisksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        [Input("clientConfiguration", required: true)]
        public Inputs.DisksClientConfigurationArgs ClientConfiguration { get; set; } = null!;

        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        [Input("endpoint")]
        public string? Endpoint { get; set; }

        /// <summary>
        /// Filters to apply to the disks
        /// </summary>
        [Input("filters")]
        public Inputs.DisksFiltersArgs? Filters { get; set; }

        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        [Input("node", required: true)]
        public string Node { get; set; } = null!;

        [Input("timeouts")]
        public Inputs.DisksTimeoutsArgs? Timeouts { get; set; }

        public DisksArgs()
        {
        }
        public static new DisksArgs Empty => new DisksArgs();
    }

    public sealed class DisksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        [Input("clientConfiguration", required: true)]
        public Input<Inputs.DisksClientConfigurationInputArgs> ClientConfiguration { get; set; } = null!;

        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Filters to apply to the disks
        /// </summary>
        [Input("filters")]
        public Input<Inputs.DisksFiltersInputArgs>? Filters { get; set; }

        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.DisksTimeoutsInputArgs>? Timeouts { get; set; }

        public DisksInvokeArgs()
        {
        }
        public static new DisksInvokeArgs Empty => new DisksInvokeArgs();
    }


    [OutputType]
    public sealed class DisksResult
    {
        /// <summary>
        /// The client configuration data
        /// </summary>
        public readonly Outputs.DisksClientConfigurationResult ClientConfiguration;
        /// <summary>
        /// The disks that match the filters
        /// </summary>
        public readonly ImmutableArray<Outputs.DisksDiskResult> Disks;
        /// <summary>
        /// endpoint to use for the talosclient. If not set, the node value will be used
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Filters to apply to the disks
        /// </summary>
        public readonly Outputs.DisksFiltersResult? Filters;
        /// <summary>
        /// The generated ID of this resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// controlplane node to retrieve the kubeconfig from
        /// </summary>
        public readonly string Node;
        public readonly Outputs.DisksTimeoutsResult? Timeouts;

        [OutputConstructor]
        private DisksResult(
            Outputs.DisksClientConfigurationResult clientConfiguration,

            ImmutableArray<Outputs.DisksDiskResult> disks,

            string endpoint,

            Outputs.DisksFiltersResult? filters,

            string id,

            string node,

            Outputs.DisksTimeoutsResult? timeouts)
        {
            ClientConfiguration = clientConfiguration;
            Disks = disks;
            Endpoint = endpoint;
            Filters = filters;
            Id = id;
            Node = node;
            Timeouts = timeouts;
        }
    }
}
