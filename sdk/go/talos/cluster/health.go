// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cluster

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// Checks the health of a Talos cluster
func Health(ctx *pulumi.Context, args *HealthArgs, opts ...pulumi.InvokeOption) (*HealthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv HealthResult
	err := ctx.Invoke("talos:cluster/health:Health", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Health.
type HealthArgs struct {
	// The client configuration data
	ClientConfiguration HealthClientConfiguration `pulumi:"clientConfiguration"`
	// List of control plane nodes to check for health.
	ControlPlaneNodes []string `pulumi:"controlPlaneNodes"`
	// endpoints to use for the health check client. Use at least one control plane endpoint.
	Endpoints []string        `pulumi:"endpoints"`
	Timeouts  *HealthTimeouts `pulumi:"timeouts"`
	// List of worker nodes to check for health.
	WorkerNodes []string `pulumi:"workerNodes"`
}

// A collection of values returned by Health.
type HealthResult struct {
	// The client configuration data
	ClientConfiguration HealthClientConfiguration `pulumi:"clientConfiguration"`
	// List of control plane nodes to check for health.
	ControlPlaneNodes []string `pulumi:"controlPlaneNodes"`
	// endpoints to use for the health check client. Use at least one control plane endpoint.
	Endpoints []string `pulumi:"endpoints"`
	// The ID of this resource.
	Id       string          `pulumi:"id"`
	Timeouts *HealthTimeouts `pulumi:"timeouts"`
	// List of worker nodes to check for health.
	WorkerNodes []string `pulumi:"workerNodes"`
}

func HealthOutput(ctx *pulumi.Context, args HealthOutputArgs, opts ...pulumi.InvokeOption) HealthResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (HealthResult, error) {
			args := v.(HealthArgs)
			r, err := Health(ctx, &args, opts...)
			var s HealthResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(HealthResultOutput)
}

// A collection of arguments for invoking Health.
type HealthOutputArgs struct {
	// The client configuration data
	ClientConfiguration HealthClientConfigurationInput `pulumi:"clientConfiguration"`
	// List of control plane nodes to check for health.
	ControlPlaneNodes pulumi.StringArrayInput `pulumi:"controlPlaneNodes"`
	// endpoints to use for the health check client. Use at least one control plane endpoint.
	Endpoints pulumi.StringArrayInput `pulumi:"endpoints"`
	Timeouts  HealthTimeoutsPtrInput  `pulumi:"timeouts"`
	// List of worker nodes to check for health.
	WorkerNodes pulumi.StringArrayInput `pulumi:"workerNodes"`
}

func (HealthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthArgs)(nil)).Elem()
}

// A collection of values returned by Health.
type HealthResultOutput struct{ *pulumi.OutputState }

func (HealthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthResult)(nil)).Elem()
}

func (o HealthResultOutput) ToHealthResultOutput() HealthResultOutput {
	return o
}

func (o HealthResultOutput) ToHealthResultOutputWithContext(ctx context.Context) HealthResultOutput {
	return o
}

// The client configuration data
func (o HealthResultOutput) ClientConfiguration() HealthClientConfigurationOutput {
	return o.ApplyT(func(v HealthResult) HealthClientConfiguration { return v.ClientConfiguration }).(HealthClientConfigurationOutput)
}

// List of control plane nodes to check for health.
func (o HealthResultOutput) ControlPlaneNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HealthResult) []string { return v.ControlPlaneNodes }).(pulumi.StringArrayOutput)
}

// endpoints to use for the health check client. Use at least one control plane endpoint.
func (o HealthResultOutput) Endpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HealthResult) []string { return v.Endpoints }).(pulumi.StringArrayOutput)
}

// The ID of this resource.
func (o HealthResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HealthResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o HealthResultOutput) Timeouts() HealthTimeoutsPtrOutput {
	return o.ApplyT(func(v HealthResult) *HealthTimeouts { return v.Timeouts }).(HealthTimeoutsPtrOutput)
}

// List of worker nodes to check for health.
func (o HealthResultOutput) WorkerNodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HealthResult) []string { return v.WorkerNodes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(HealthResultOutput{})
}
