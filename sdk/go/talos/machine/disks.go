// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/internal"
)

// Generate a machine configuration for a node type
//
// > **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `machine.Disks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-talos/sdk/go/talos/machine"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// thisSecrets, err := machine.NewSecrets(ctx, "thisSecrets", nil)
// if err != nil {
// return err
// }
// thisDisks := machine.DisksOutput(ctx, machine.DisksOutputArgs{
// ClientConfiguration: thisSecrets.ClientConfiguration,
// Node: pulumi.String("10.5.0.2"),
// Filters: &machine.DisksFiltersArgs{
// Size: pulumi.String("> 100GB"),
// Type: pulumi.String("nvme"),
// },
// }, nil);
// ctx.Export("nvmeDisks", thisDisks.ApplyT(func(thisDisks machine.DisksResult) ([]*string, error) {
// var splat0 []*string
// for _, val0 := range thisDisks.Disks {
// splat0 = append(splat0, val0.Name)
// }
// return splat0, nil
// }).(pulumi.[]*stringOutput))
// return nil
// })
// }
// ```
func Disks(ctx *pulumi.Context, args *DisksArgs, opts ...pulumi.InvokeOption) (*DisksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv DisksResult
	err := ctx.Invoke("talos:machine/disks:Disks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Disks.
type DisksArgs struct {
	// The client configuration data
	ClientConfiguration DisksClientConfiguration `pulumi:"clientConfiguration"`
	// endpoint to use for the talosclient. If not set, the node value will be used
	Endpoint *string `pulumi:"endpoint"`
	// Filters to apply to the disks
	Filters *DisksFilters `pulumi:"filters"`
	// controlplane node to retrieve the kubeconfig from
	Node     string         `pulumi:"node"`
	Timeouts *DisksTimeouts `pulumi:"timeouts"`
}

// A collection of values returned by Disks.
type DisksResult struct {
	// The client configuration data
	ClientConfiguration DisksClientConfiguration `pulumi:"clientConfiguration"`
	// The disks that match the filters
	Disks []DisksDisk `pulumi:"disks"`
	// endpoint to use for the talosclient. If not set, the node value will be used
	Endpoint string `pulumi:"endpoint"`
	// Filters to apply to the disks
	Filters *DisksFilters `pulumi:"filters"`
	// The generated ID of this resource
	Id string `pulumi:"id"`
	// controlplane node to retrieve the kubeconfig from
	Node     string         `pulumi:"node"`
	Timeouts *DisksTimeouts `pulumi:"timeouts"`
}

func DisksOutput(ctx *pulumi.Context, args DisksOutputArgs, opts ...pulumi.InvokeOption) DisksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DisksResult, error) {
			args := v.(DisksArgs)
			r, err := Disks(ctx, &args, opts...)
			var s DisksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DisksResultOutput)
}

// A collection of arguments for invoking Disks.
type DisksOutputArgs struct {
	// The client configuration data
	ClientConfiguration DisksClientConfigurationInput `pulumi:"clientConfiguration"`
	// endpoint to use for the talosclient. If not set, the node value will be used
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Filters to apply to the disks
	Filters DisksFiltersPtrInput `pulumi:"filters"`
	// controlplane node to retrieve the kubeconfig from
	Node     pulumi.StringInput    `pulumi:"node"`
	Timeouts DisksTimeoutsPtrInput `pulumi:"timeouts"`
}

func (DisksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksArgs)(nil)).Elem()
}

// A collection of values returned by Disks.
type DisksResultOutput struct{ *pulumi.OutputState }

func (DisksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisksResult)(nil)).Elem()
}

func (o DisksResultOutput) ToDisksResultOutput() DisksResultOutput {
	return o
}

func (o DisksResultOutput) ToDisksResultOutputWithContext(ctx context.Context) DisksResultOutput {
	return o
}

// The client configuration data
func (o DisksResultOutput) ClientConfiguration() DisksClientConfigurationOutput {
	return o.ApplyT(func(v DisksResult) DisksClientConfiguration { return v.ClientConfiguration }).(DisksClientConfigurationOutput)
}

// The disks that match the filters
func (o DisksResultOutput) Disks() DisksDiskArrayOutput {
	return o.ApplyT(func(v DisksResult) []DisksDisk { return v.Disks }).(DisksDiskArrayOutput)
}

// endpoint to use for the talosclient. If not set, the node value will be used
func (o DisksResultOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v DisksResult) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Filters to apply to the disks
func (o DisksResultOutput) Filters() DisksFiltersPtrOutput {
	return o.ApplyT(func(v DisksResult) *DisksFilters { return v.Filters }).(DisksFiltersPtrOutput)
}

// The generated ID of this resource
func (o DisksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DisksResult) string { return v.Id }).(pulumi.StringOutput)
}

// controlplane node to retrieve the kubeconfig from
func (o DisksResultOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v DisksResult) string { return v.Node }).(pulumi.StringOutput)
}

func (o DisksResultOutput) Timeouts() DisksTimeoutsPtrOutput {
	return o.ApplyT(func(v DisksResult) *DisksTimeouts { return v.Timeouts }).(DisksTimeoutsPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(DisksResultOutput{})
}
