// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Generate a machine configuration for a node type
 *
 * > **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.Disks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as talos from "@pulumi/talos";
 * import * as talos from "@pulumiverse/talos";
 *
 * const thisSecrets = new talos.machine.Secrets("thisSecrets", {});
 * const thisDisks = talos.machine.DisksOutput({
 *     clientConfiguration: thisSecrets.clientConfiguration,
 *     node: "10.5.0.2",
 *     filters: {
 *         size: "> 100GB",
 *         type: "nvme",
 *     },
 * });
 * export const nvmeDisks = thisDisks.apply(thisDisks => thisDisks.disks.map(__item => __item.name));
 * ```
 */
export function disks(args: DisksArgs, opts?: pulumi.InvokeOptions): Promise<DisksResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("talos:machine/disks:Disks", {
        "clientConfiguration": args.clientConfiguration,
        "endpoint": args.endpoint,
        "filters": args.filters,
        "node": args.node,
        "timeouts": args.timeouts,
    }, opts);
}

/**
 * A collection of arguments for invoking Disks.
 */
export interface DisksArgs {
    /**
     * The client configuration data
     */
    clientConfiguration: inputs.machine.DisksClientConfiguration;
    /**
     * endpoint to use for the talosclient. If not set, the node value will be used
     */
    endpoint?: string;
    /**
     * Filters to apply to the disks
     */
    filters?: inputs.machine.DisksFilters;
    /**
     * controlplane node to retrieve the kubeconfig from
     */
    node: string;
    timeouts?: inputs.machine.DisksTimeouts;
}

/**
 * A collection of values returned by Disks.
 */
export interface DisksResult {
    /**
     * The client configuration data
     */
    readonly clientConfiguration: outputs.machine.DisksClientConfiguration;
    /**
     * The disks that match the filters
     */
    readonly disks: outputs.machine.DisksDisk[];
    /**
     * endpoint to use for the talosclient. If not set, the node value will be used
     */
    readonly endpoint: string;
    /**
     * Filters to apply to the disks
     */
    readonly filters?: outputs.machine.DisksFilters;
    /**
     * The generated ID of this resource
     */
    readonly id: string;
    /**
     * controlplane node to retrieve the kubeconfig from
     */
    readonly node: string;
    readonly timeouts?: outputs.machine.DisksTimeouts;
}
/**
 * Generate a machine configuration for a node type
 *
 * > **Note:** Since Talos natively supports `.machine.install.diskSelector`, the `talos.machine.Disks` data source maybe just used to query disk information that could be used elsewhere. It's recommended to use `machine.install.diskSelector` in Talos machine configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as talos from "@pulumi/talos";
 * import * as talos from "@pulumiverse/talos";
 *
 * const thisSecrets = new talos.machine.Secrets("thisSecrets", {});
 * const thisDisks = talos.machine.DisksOutput({
 *     clientConfiguration: thisSecrets.clientConfiguration,
 *     node: "10.5.0.2",
 *     filters: {
 *         size: "> 100GB",
 *         type: "nvme",
 *     },
 * });
 * export const nvmeDisks = thisDisks.apply(thisDisks => thisDisks.disks.map(__item => __item.name));
 * ```
 */
export function disksOutput(args: DisksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<DisksResult> {
    return pulumi.output(args).apply((a: any) => disks(a, opts))
}

/**
 * A collection of arguments for invoking Disks.
 */
export interface DisksOutputArgs {
    /**
     * The client configuration data
     */
    clientConfiguration: pulumi.Input<inputs.machine.DisksClientConfigurationArgs>;
    /**
     * endpoint to use for the talosclient. If not set, the node value will be used
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Filters to apply to the disks
     */
    filters?: pulumi.Input<inputs.machine.DisksFiltersArgs>;
    /**
     * controlplane node to retrieve the kubeconfig from
     */
    node: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.machine.DisksTimeoutsArgs>;
}
